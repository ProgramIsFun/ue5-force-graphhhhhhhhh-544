

#include "/Engine/Private/Common.ush"


// Buffers
StructuredBuffer<float> Masses;
RWStructuredBuffer<float3> Positions;
RWStructuredBuffer<float3> Velocities;


//
StructuredBuffer<int> LinkOffsets;
StructuredBuffer<int> LinkCounts;
StructuredBuffer<int> LinkIndices;
StructuredBuffer<float> LinkStrengths;
StructuredBuffer<float> LinkBiases;
StructuredBuffer<float> Linkinout;
const uint NumLinks;



// Settings
const uint NumBodies;
const float GravityConstant;
const float CameraAspectRatio;
const float ViewportWidth;
const float DeltaTime;
const float alpha;








/**
 *	Compute and return the resultant 2D gravitational force between Target and AffectingBody.
 */
float3 CalculateGravitationalForce(uint TargetBodyID, uint AffectingBodyID)
{


	float3 dir = Positions[AffectingBodyID] - Positions[TargetBodyID];

	
	float d = distance(Positions[TargetBodyID], Positions[AffectingBodyID]);



	// float d= length(dir);
	float l = d * d;
	float distancemin1 = 1;
	if (l < distancemin1)
	{
		l = sqrt(distancemin1 * l);
	}
	
	// dir = normalize(dir);

	float ForceMagnitude;
	if (0)
	{
		ForceMagnitude = GravityConstant * Masses[TargetBodyID] * Masses[AffectingBodyID] /
			(d * d);
	}
	else
	{
		ForceMagnitude = -60;
	}
	
	//
	// float l = dir.Size() * dir.Size();
	// if (l < distancemin)
	// {
	// 	l = sqrt(distancemin * l);
	// }
	// nodeVelocities[node.Key] += dir * nodeStrength * alpha / l;
	// 				
	
	return dir * ForceMagnitude * alpha /l;
}

[numthreads(256, 1, 1)]
void CalculateVelocitiesCS(uint3 ID : SV_DispatchThreadID)
{
	if (ID.x >= NumBodies) return;


	if (1)
	{
		




		float3 Acceleration= float3(0, 0, 0);


		// Calculate link force
		int offset = LinkOffsets[ID.x];
		int count = LinkCounts[ID.x];
		for (int i = offset;
			i < offset + count;
			i++)
		{
			int affectingBodyID = LinkIndices[i];
			int Linkinout1 = Linkinout[i];


			float3 new_v;
			if (Linkinout1 == 1)
			{
				new_v = Positions[affectingBodyID] + Velocities[affectingBodyID] - Positions[ID.x] - Velocities[ID.x];
			}else
			{
				new_v = Positions[ID.x] + Velocities[ID.x] - Positions[affectingBodyID] - Velocities[affectingBodyID];
			}
			
			float l = length(new_v);
			l = (l - 30) /
				l * alpha * LinkStrengths[i];
			new_v *= l;
			if (Linkinout1 == 1)
			{
				Acceleration += new_v * (1 - LinkBiases[i]);
				// nodeVelocities[link.source] += new_v * (1 - link.bias);
			}
			else
			{
				Acceleration -= new_v * (LinkBiases[i]);
				// nodeVelocities[link.target] -= new_v * (link.bias);
			}

		}



		// Calculate gravitational force
		for (uint i = 0; i < NumBodies; i++)
		{
			// Skip if self.
			if (i == ID.x) continue;
			float3 GravityForce = CalculateGravitationalForce(ID.x, i);
			Acceleration += GravityForce;
			
		}
		
		Velocities[ID.x] += Acceleration * DeltaTime;





		
		const float velocityDecay = 0.6;
		Velocities[ID.x] *= velocityDecay;
		Positions[ID.x] += Velocities[ID.x] * DeltaTime;
	}
	else
	{
		float3 pos = Positions[ID.x];  // Read the current position
		pos += float3(1.0, 1.0,1.0);  // Increment each component by 1
		Positions[ID.x] = pos;  // Write it back to the buffer
	}

}
